// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package birdweather

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// A time period (e.g. last 24 hours) or explicit date duration.
type InputDuration struct {
	// Number of units of time
	Count int `json:"count"`
	// Unit of time (hour/day/week/month/year)
	Unit string `json:"unit"`
	// From date
	From time.Time `json:"from"`
	// To date
	To time.Time `json:"to"`
}

// GetCount returns InputDuration.Count, and is useful for accessing the field via an interface.
func (v *InputDuration) GetCount() int { return v.Count }

// GetUnit returns InputDuration.Unit, and is useful for accessing the field via an interface.
func (v *InputDuration) GetUnit() string { return v.Unit }

// GetFrom returns InputDuration.From, and is useful for accessing the field via an interface.
func (v *InputDuration) GetFrom() time.Time { return v.From }

// GetTo returns InputDuration.To, and is useful for accessing the field via an interface.
func (v *InputDuration) GetTo() time.Time { return v.To }

// __dailyCountsInput is used internally by genqlient
type __dailyCountsInput struct {
	StationId string `json:"stationId"`
}

// GetStationId returns __dailyCountsInput.StationId, and is useful for accessing the field via an interface.
func (v *__dailyCountsInput) GetStationId() string { return v.StationId }

// __hourlyCountsInput is used internally by genqlient
type __hourlyCountsInput struct {
	StationId  string        `json:"stationId"`
	TimePeriod InputDuration `json:"timePeriod"`
}

// GetStationId returns __hourlyCountsInput.StationId, and is useful for accessing the field via an interface.
func (v *__hourlyCountsInput) GetStationId() string { return v.StationId }

// GetTimePeriod returns __hourlyCountsInput.TimePeriod, and is useful for accessing the field via an interface.
func (v *__hourlyCountsInput) GetTimePeriod() InputDuration { return v.TimePeriod }

// dailyCountsResponse is returned by dailyCounts on success.
type dailyCountsResponse struct {
	Station dailyCountsStation `json:"station"`
}

// GetStation returns dailyCountsResponse.Station, and is useful for accessing the field via an interface.
func (v *dailyCountsResponse) GetStation() dailyCountsStation { return v.Station }

// dailyCountsStation includes the requested fields of the GraphQL type Station.
// The GraphQL type's documentation follows.
//
// A BirdWeather station (either real or virtual).
type dailyCountsStation struct {
	// Station name
	Name       string                                     `json:"name"`
	TopSpecies []dailyCountsStationTopSpeciesSpeciesCount `json:"topSpecies"`
}

// GetName returns dailyCountsStation.Name, and is useful for accessing the field via an interface.
func (v *dailyCountsStation) GetName() string { return v.Name }

// GetTopSpecies returns dailyCountsStation.TopSpecies, and is useful for accessing the field via an interface.
func (v *dailyCountsStation) GetTopSpecies() []dailyCountsStationTopSpeciesSpeciesCount {
	return v.TopSpecies
}

// dailyCountsStationTopSpeciesSpeciesCount includes the requested fields of the GraphQL type SpeciesCount.
type dailyCountsStationTopSpeciesSpeciesCount struct {
	Breakdown dailyCountsStationTopSpeciesSpeciesCountBreakdown `json:"breakdown"`
	Species   dailyCountsStationTopSpeciesSpeciesCountSpecies   `json:"species"`
}

// GetBreakdown returns dailyCountsStationTopSpeciesSpeciesCount.Breakdown, and is useful for accessing the field via an interface.
func (v *dailyCountsStationTopSpeciesSpeciesCount) GetBreakdown() dailyCountsStationTopSpeciesSpeciesCountBreakdown {
	return v.Breakdown
}

// GetSpecies returns dailyCountsStationTopSpeciesSpeciesCount.Species, and is useful for accessing the field via an interface.
func (v *dailyCountsStationTopSpeciesSpeciesCount) GetSpecies() dailyCountsStationTopSpeciesSpeciesCountSpecies {
	return v.Species
}

// dailyCountsStationTopSpeciesSpeciesCountBreakdown includes the requested fields of the GraphQL type SpeciesCountBreakdown.
type dailyCountsStationTopSpeciesSpeciesCountBreakdown struct {
	// Count of almost certain detections
	AlmostCertain int `json:"almostCertain"`
	// Count of uncertain detections
	Uncertain int `json:"uncertain"`
	// Count of unlikely detections
	Unlikely int `json:"unlikely"`
	// Count of very likely detections
	VeryLikely int `json:"veryLikely"`
}

// GetAlmostCertain returns dailyCountsStationTopSpeciesSpeciesCountBreakdown.AlmostCertain, and is useful for accessing the field via an interface.
func (v *dailyCountsStationTopSpeciesSpeciesCountBreakdown) GetAlmostCertain() int {
	return v.AlmostCertain
}

// GetUncertain returns dailyCountsStationTopSpeciesSpeciesCountBreakdown.Uncertain, and is useful for accessing the field via an interface.
func (v *dailyCountsStationTopSpeciesSpeciesCountBreakdown) GetUncertain() int { return v.Uncertain }

// GetUnlikely returns dailyCountsStationTopSpeciesSpeciesCountBreakdown.Unlikely, and is useful for accessing the field via an interface.
func (v *dailyCountsStationTopSpeciesSpeciesCountBreakdown) GetUnlikely() int { return v.Unlikely }

// GetVeryLikely returns dailyCountsStationTopSpeciesSpeciesCountBreakdown.VeryLikely, and is useful for accessing the field via an interface.
func (v *dailyCountsStationTopSpeciesSpeciesCountBreakdown) GetVeryLikely() int { return v.VeryLikely }

// dailyCountsStationTopSpeciesSpeciesCountSpecies includes the requested fields of the GraphQL type Species.
type dailyCountsStationTopSpeciesSpeciesCountSpecies struct {
	// Common name
	CommonName string `json:"commonName"`
	// Scientific name
	ScientificName string `json:"scientificName"`
	// Credited author of image
	ImageCredit string `json:"imageCredit"`
	// 400x400 image URL
	ImageUrl string `json:"imageUrl"`
}

// GetCommonName returns dailyCountsStationTopSpeciesSpeciesCountSpecies.CommonName, and is useful for accessing the field via an interface.
func (v *dailyCountsStationTopSpeciesSpeciesCountSpecies) GetCommonName() string { return v.CommonName }

// GetScientificName returns dailyCountsStationTopSpeciesSpeciesCountSpecies.ScientificName, and is useful for accessing the field via an interface.
func (v *dailyCountsStationTopSpeciesSpeciesCountSpecies) GetScientificName() string {
	return v.ScientificName
}

// GetImageCredit returns dailyCountsStationTopSpeciesSpeciesCountSpecies.ImageCredit, and is useful for accessing the field via an interface.
func (v *dailyCountsStationTopSpeciesSpeciesCountSpecies) GetImageCredit() string {
	return v.ImageCredit
}

// GetImageUrl returns dailyCountsStationTopSpeciesSpeciesCountSpecies.ImageUrl, and is useful for accessing the field via an interface.
func (v *dailyCountsStationTopSpeciesSpeciesCountSpecies) GetImageUrl() string { return v.ImageUrl }

// hourlyCountsResponse is returned by hourlyCounts on success.
type hourlyCountsResponse struct {
	Station hourlyCountsStation `json:"station"`
}

// GetStation returns hourlyCountsResponse.Station, and is useful for accessing the field via an interface.
func (v *hourlyCountsResponse) GetStation() hourlyCountsStation { return v.Station }

// hourlyCountsStation includes the requested fields of the GraphQL type Station.
// The GraphQL type's documentation follows.
//
// A BirdWeather station (either real or virtual).
type hourlyCountsStation struct {
	// Station name
	Name       string                                      `json:"name"`
	TopSpecies []hourlyCountsStationTopSpeciesSpeciesCount `json:"topSpecies"`
}

// GetName returns hourlyCountsStation.Name, and is useful for accessing the field via an interface.
func (v *hourlyCountsStation) GetName() string { return v.Name }

// GetTopSpecies returns hourlyCountsStation.TopSpecies, and is useful for accessing the field via an interface.
func (v *hourlyCountsStation) GetTopSpecies() []hourlyCountsStationTopSpeciesSpeciesCount {
	return v.TopSpecies
}

// hourlyCountsStationTopSpeciesSpeciesCount includes the requested fields of the GraphQL type SpeciesCount.
type hourlyCountsStationTopSpeciesSpeciesCount struct {
	Breakdown hourlyCountsStationTopSpeciesSpeciesCountBreakdown `json:"breakdown"`
	Species   hourlyCountsStationTopSpeciesSpeciesCountSpecies   `json:"species"`
}

// GetBreakdown returns hourlyCountsStationTopSpeciesSpeciesCount.Breakdown, and is useful for accessing the field via an interface.
func (v *hourlyCountsStationTopSpeciesSpeciesCount) GetBreakdown() hourlyCountsStationTopSpeciesSpeciesCountBreakdown {
	return v.Breakdown
}

// GetSpecies returns hourlyCountsStationTopSpeciesSpeciesCount.Species, and is useful for accessing the field via an interface.
func (v *hourlyCountsStationTopSpeciesSpeciesCount) GetSpecies() hourlyCountsStationTopSpeciesSpeciesCountSpecies {
	return v.Species
}

// hourlyCountsStationTopSpeciesSpeciesCountBreakdown includes the requested fields of the GraphQL type SpeciesCountBreakdown.
type hourlyCountsStationTopSpeciesSpeciesCountBreakdown struct {
	// Count of almost certain detections
	AlmostCertain int `json:"almostCertain"`
}

// GetAlmostCertain returns hourlyCountsStationTopSpeciesSpeciesCountBreakdown.AlmostCertain, and is useful for accessing the field via an interface.
func (v *hourlyCountsStationTopSpeciesSpeciesCountBreakdown) GetAlmostCertain() int {
	return v.AlmostCertain
}

// hourlyCountsStationTopSpeciesSpeciesCountSpecies includes the requested fields of the GraphQL type Species.
type hourlyCountsStationTopSpeciesSpeciesCountSpecies struct {
	// Common name
	CommonName string `json:"commonName"`
}

// GetCommonName returns hourlyCountsStationTopSpeciesSpeciesCountSpecies.CommonName, and is useful for accessing the field via an interface.
func (v *hourlyCountsStationTopSpeciesSpeciesCountSpecies) GetCommonName() string {
	return v.CommonName
}

// The query or mutation executed by dailyCounts.
const dailyCounts_Operation = `
query dailyCounts ($stationId: ID!) {
	station(id: $stationId) {
		name
		topSpecies(limit: 50) {
			breakdown {
				almostCertain
				uncertain
				unlikely
				veryLikely
			}
			species {
				commonName
				scientificName
				imageCredit
				imageUrl
			}
		}
	}
}
`

func dailyCounts(
	ctx context.Context,
	client graphql.Client,
	stationId string,
) (*dailyCountsResponse, error) {
	req := &graphql.Request{
		OpName: "dailyCounts",
		Query:  dailyCounts_Operation,
		Variables: &__dailyCountsInput{
			StationId: stationId,
		},
	}
	var err error

	var data dailyCountsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by hourlyCounts.
const hourlyCounts_Operation = `
query hourlyCounts ($stationId: ID!, $timePeriod: InputDuration!) {
	station(id: $stationId) {
		name
		topSpecies(limit: 20, period: $timePeriod) {
			breakdown {
				almostCertain
			}
			species {
				commonName
			}
		}
	}
}
`

func hourlyCounts(
	ctx context.Context,
	client graphql.Client,
	stationId string,
	timePeriod InputDuration,
) (*hourlyCountsResponse, error) {
	req := &graphql.Request{
		OpName: "hourlyCounts",
		Query:  hourlyCounts_Operation,
		Variables: &__hourlyCountsInput{
			StationId:  stationId,
			TimePeriod: timePeriod,
		},
	}
	var err error

	var data hourlyCountsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
